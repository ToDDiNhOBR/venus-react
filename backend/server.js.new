require('dotenv').config();
const path = require('path');
const fs = require('fs');
const express = require('express');
const cors = require('cors');
const { google } = require('googleapis');

const {
  SPREADSHEET_ID,
  CLIENTS_SPREADSHEET_ID,
  PROFILE_SPREADSHEET_ID,
  CLIENTS_SHEET,
  PROSPECTS_SHEET,
  INDICADOR_SPREADSHEET_ID,
  INDICADOR_SHEET,
  USUARIOS_SPREADSHEET_ID,
  USUARIOS_SHEET,
  NOTIFICATIONS_SPREADSHEET_ID,
  NOTIFICATIONS_SHEET,
} = require('./sheets');

const app = express();
const PORT = process.env.PORT || 5002;

// Serve user profile images statically
app.use('/user-perfil-images', express.static(path.join(__dirname, '../src/user-perfil-images')));

app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:3002', 'http://192.168.1.45:3000']
}));

app.use(express.json({ limit: '10mb' }));

let sheets;

async function initializeSheets() {
  try {
    console.log('Initializing Google Sheets API...');
    const keyFilePath = path.resolve(__dirname, 'google-credentials.json');
    console.log('Resolved keyFile path:', keyFilePath);

    if (!fs.existsSync(keyFilePath)) {
      throw new Error(`Google credentials file not found at path: ${keyFilePath}`);
    }

    const auth = new google.auth.GoogleAuth({
      keyFile: keyFilePath,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    sheets = google.sheets({ version: 'v4', auth: await auth.getClient() });
    
    // Test authentication by trying to access spreadsheets
    await sheets.spreadsheets.get({
      spreadsheetId: SPREADSHEET_ID
    });
    await sheets.spreadsheets.get({
      spreadsheetId: PROFILE_SPREADSHEET_ID
    });
    await sheets.spreadsheets.get({
      spreadsheetId: USUARIOS_SPREADSHEET_ID
    });
    
    console.log('Successfully connected to Google Sheets API for all spreadsheets');
    return sheets;
  } catch (error) {
    console.error('Error initializing Google Sheets:', error);
    if (error.code === 'ENOENT') {
      console.error('google-credentials.json file not found');
    } else if (error.response?.status === 403) {
      console.error('Authentication failed - check service account permissions');
    } else if (error.response?.status === 404) {
      console.error('Spreadsheet not found - check SPREADSHEET_ID or PROFILE_SHEET');
    }
    console.error('Full error details:', error);
    throw error;
  }
}

async function startServer() {
  try {
    sheets = await initializeSheets();

    const { router: filiaisRouter, setSheets: setFiliaisSheets } = require('./filiais-api');
    setFiliaisSheets(sheets);
    app.use('/api/admin/filiais', filiaisRouter);

    const indicadorProspectsRouter = require('./api-indicador-prospects');
    app.use('/api/indicador', indicadorProspectsRouter);

    const userImageUploadRouter = require('./userImageUpload');
    app.use('/api/user-image', userImageUploadRouter);

    const productsRouter = require('./products');

    // Logging middleware for /api/products to debug 404 issue
    app.use('/api/products', (req, res, next) => {
      console.log(`Received request for /api/products: ${req.method} ${req.originalUrl}`);
      next();
    });

    app.use('/api/products', productsRouter);

    const server = app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });

    server.on('error', (error) => {
      if (error.code === 'EADDRINUSE') {
        console.error(`Port ${PORT} is already in use. Please stop the process using this port or change the port.`);
      } else {
        console.error('Server error:', error);
      }
    });
  } catch (error) {
    console.error('Failed to initialize Google Sheets API. Server not started.');
  }
}

// Helper functions for getting next available codes
async function getNextClientCode() {
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: CLIENTS_SPREADSHEET_ID,
      range: `${CLIENTS_SHEET}!A2:A`,
    });

    const values = response.data.values || [];
    const codes = values.map(row => parseInt(row[0] || '0'));
    const maxCode = Math.max(0, ...codes);
    return (maxCode + 1).toString().padStart(6, '0');
  } catch (error) {
    console.error('Error getting next client code:', error);
    throw error;
  }
}

async function getNextProspectCode() {
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: `${PROSPECTS_SHEET}!A2:A`,
    });

    const values = response.data.values || [];
    const codes = values.map(row => parseInt(row[0] || '0'));
    const maxCode = Math.max(0, ...codes);
    return (maxCode + 1).toString().padStart(6, '0');
  } catch (error) {
    console.error('Error getting next prospect code:', error);
    throw error;
  }
}

async function getNextIndicadorCode() {
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: INDICADOR_SPREADSHEET_ID,
      range: `${INDICADOR_SHEET}!A2:A`,
    });

    const values = response.data.values || [];
    const codes = values.map(row => parseInt(row[0] || '0'));
    const maxCode = Math.max(0, ...codes);
    return (maxCode + 1).toString().padStart(6, '0');
  } catch (error) {
    console.error('Error getting next indicador code:', error);
    throw error;
  }
}

async function getNextUsuarioCode() {
  try {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: USUARIOS_SPREADSHEET_ID,
      range: `${USUARIOS_SHEET}!A2:A`,
    });

    const values = response.data.values || [];
    const codes = values.map(row => parseInt(row[0] || '0'));
    const maxCode = Math.max(0, ...codes);
    return (maxCode + 1).toString().padStart(6, '0');
  } catch (error) {
    console.error('Error getting next usuario code:', error);
    throw error;
  }
}

// Start the server
startServer();

// Include all the route handlers from the original file here...
[REST OF FILE CONTENT REMAINS THE SAME]
